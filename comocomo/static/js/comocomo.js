// Generated by CoffeeScript 1.6.3
(function() {
  var ChosenFoodKindView, FoodKind, FoodKindCollection, FoodType, FoodTypeCollection, FoodTypeSelectView, SlotView, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  FoodKind = (function(_super) {
    __extends(FoodKind, _super);

    function FoodKind() {
      _ref = FoodKind.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return FoodKind;

  })(Backbone.Model);

  FoodKindCollection = (function(_super) {
    __extends(FoodKindCollection, _super);

    function FoodKindCollection() {
      _ref1 = FoodKindCollection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    FoodKindCollection.prototype.model = FoodKind;

    return FoodKindCollection;

  })(Backbone.Collection);

  FoodType = (function(_super) {
    __extends(FoodType, _super);

    function FoodType() {
      _ref2 = FoodType.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    return FoodType;

  })(Backbone.Model);

  FoodTypeCollection = (function(_super) {
    __extends(FoodTypeCollection, _super);

    function FoodTypeCollection() {
      _ref3 = FoodTypeCollection.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    FoodTypeCollection.prototype.model = FoodType;

    return FoodTypeCollection;

  })(Backbone.Collection);

  SlotView = (function(_super) {
    __extends(SlotView, _super);

    function SlotView() {
      _ref4 = SlotView.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    SlotView.prototype.events = {
      'click .comocomo-kind-button': 'onClickKindButton',
      'click .comocomo-save-button': 'onClickSaveButton'
    };

    SlotView.prototype.initialize = function() {
      var _this = this;
      this.current_year = this.$el.data('comocomo-year');
      this.current_month = this.$el.data('comocomo-month');
      this.current_day = this.$el.data('comocomo-day');
      this.current_slot = this.$el.data('comocomo-slot');
      this.foodKinds = new FoodKindCollection();
      this.foodTypes = new FoodTypeCollection();
      this.selectedFoodTypes = new FoodTypeCollection();
      return $.ajax({
        url: '/food_kinds/',
        success: function(data, textStatus, jqXHR) {
          _this.foodKinds.reset(data);
          return $.ajax({
            url: '/food_types/',
            success: function(data, textStatus, jqXHR) {
              _this.foodTypes.reset(data);
              return $.ajax({
                url: "/slot_eaten/?year=" + _this.current_year + "&month=" + _this.current_month + "&day=" + _this.current_day + "&slot=" + _this.current_slot,
                success: function(data, textStatus, jqXHR) {
                  var kind, type, typeId, _i, _len, _results;
                  _results = [];
                  for (_i = 0, _len = data.length; _i < _len; _i++) {
                    typeId = data[_i];
                    type = _this.foodTypes.get(typeId);
                    kind = _this.foodKinds.get(type.get('kind_id'));
                    _results.push(_this.addFoodKind(kind, type));
                  }
                  return _results;
                }
              });
            }
          });
        }
      });
    };

    SlotView.prototype.addFoodKind = function(kind, selectedType) {
      var chosen, chosen_id, select_id, type_select, types,
        _this = this;
      if (selectedType === null) {
        types = this.foodTypes.filter(function(item) {
          return item.get('kind_id') === kind.get('id');
        });
        selectedType = types[0];
      }
      this.selectedFoodTypes.add(selectedType);
      chosen = new ChosenFoodKindView({
        'kind': kind
      });
      chosen_id = "#comocomo-chosen-food-kinds-" + this.current_year + "-" + this.current_month + "-" + this.current_day + "-" + this.current_slot;
      $(chosen_id).append(chosen.render().$el.html());
      type_select = new FoodTypeSelectView({
        'kind': kind,
        'selectedType': selectedType,
        'foodTypes': this.foodTypes
      });
      select_id = "#comocomo-food-type-selects-" + this.current_year + "-" + this.current_month + "-" + this.current_day + "-" + this.current_slot;
      $(select_id).append(type_select.render().$el.html());
      $("" + select_id + " div[data-role='fieldcontain']").trigger('create');
      return $("" + select_id + " div[data-role='fieldcontain']").fieldcontain('refresh');
    };

    SlotView.prototype.onClickKindButton = function(event) {
      var kind, target;
      target = $(event.currentTarget);
      kind = this.foodKinds.get(target.data('comocomo-kind-id'));
      return this.addFoodKind(kind, null);
    };

    SlotView.prototype.onClickSaveButton = function(event) {
      var _this = this;
      event.preventDefault;
      return $.post("/slot_eaten/?year=" + this.current_year + "&month=" + this.current_month + "&day=" + this.current_day + "&slot=" + this.current_slot, JSON.stringify(this.selectedFoodTypes), function(data) {
        if (data.success) {
          return console.log("hola");
        }
      }, 'json');
    };

    return SlotView;

  })(Jackbone.View);

  ChosenFoodKindView = (function(_super) {
    __extends(ChosenFoodKindView, _super);

    function ChosenFoodKindView() {
      _ref5 = ChosenFoodKindView.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    ChosenFoodKindView.prototype.render = function() {
      var kind;
      kind = this.options['kind'];
      this.$el.html("<img src=\"" + (kind.get('icon_path')) + "\"/>");
      return this;
    };

    return ChosenFoodKindView;

  })(Jackbone.View);

  FoodTypeSelectView = (function(_super) {
    __extends(FoodTypeSelectView, _super);

    function FoodTypeSelectView() {
      _ref6 = FoodTypeSelectView.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    FoodTypeSelectView.prototype.render = function() {
      var is_checked, kind, select_block, selectedType, type, types, types_block, _i, _len,
        _this = this;
      kind = this.options['kind'];
      selectedType = this.options['selectedType'];
      types = this.options['foodTypes'].filter(function(item) {
        return item.get('kind_id') === kind.get('id');
      });
      types_block = "";
      for (_i = 0, _len = types.length; _i < _len; _i++) {
        type = types[_i];
        is_checked = (selectedType && (type.get('id') === selectedType.get('id')) ? 'checked="checked"' : '');
        types_block += "<input type=\"radio\" data-theme=\"c\" name=\"select-type-" + (kind.get('id')) + "\"\n       id=\"select-type-" + (kind.get('id')) + "-" + (type.get('id')) + "\"\n       value=\"" + (type.get('id')) + "\"" + is_checked + " />\n<label for=\"select-type-" + (kind.get('id')) + "-" + (type.get('id')) + "\">" + (type.get('name')) + "</label>";
      }
      select_block = "<div data-role=\"fieldcontain\">\n    <fieldset data-role=\"controlgroup\">\n        <legend><img src=\"" + (kind.get('icon_path')) + "\"/> " + (kind.get('name')) + "</legend>\n        " + types_block + "\n    </fieldset>\n</div>";
      this.$el.html(select_block);
      return this;
    };

    return FoodTypeSelectView;

  })(Jackbone.View);

  $(document).bind('pageinit', function(event) {
    var slotView;
    if (event.target.id === 'comocomo-slot-page') {
      return slotView = new SlotView({
        'el': event.target
      });
    }
  });

}).call(this);
